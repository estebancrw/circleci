# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  test:
    docker:
      - image: redis:4.0.8
    steps:
      - run:
          name: echo
          command: |
            echo "Echo inside Redis image"
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.4

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/circleci

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python main.py

      - run:
          name: save test artifacts
          command: |
            echo "This is a test report" > reports

      - store_artifacts:
          path: reports
          destination: reports
  deploy-prod:
    docker:
      - image: airhelp/kops: 1.8.0
        environment:
          AWS_PROFILE: default
          KOPS_STATE_STORE: s3://my-bucket
    working_directory: ~/circleci
    steps:
      - checkout
      - run:
          name: cat requirements file
          command: |
            cat requirements.txt
      - setup_remote_docker
      - run:
          name: docker command
          command: |
            docker ps
      - deploy:
          name: deploy environment
          command: |
            echo "Deploying code to environment"
workflows:
  version: 2
  test_build:
    jobs:
      - test
      - build:
          requires:
            - test
 test_deploy:
    jobs:
      - hold:
          type: approval
          requires:
            - test
      - deploy-prod:
          filters:
            branches:
              only:
                - master
                - /release.*/
          requires:
            - hold
